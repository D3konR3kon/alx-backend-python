pipeline {
    agent any

    environment {
        PROJECT_NAME = 'messaging_app'
        VENV_DIR = 'venv'
        PYTHON = 'venv/bin/python'
        PIP = 'venv/bin/pip'
        PYTEST = 'venv/bin/pytest'
    }

    stages {
        stage('Checkout') {
            steps {
                git branch: 'main', 
                    credentialsId: 'd96ab65b-91c3-40a8-8ac3-46bd6231fa82', 
                    url: 'https://github.com/D3konR3kon/alx-backend-python.git'
            }
        }

        stage('Setup Python') {
            steps {
                sh """
                    cd ${PROJECT_NAME}
                    python -m venv ${VENV_DIR}
                    . venv/bin/activate
                    ${PIP} install --upgrade pip
                    ${PIP} install -r requirements.txt
                    echo "Installed packages:"
                    pip list
                    echo "Running initial tests..."
                    ${PYTHON} manage.py test
                """
            }
        }

        stage('Run Tests') {
            steps {
                sh """
                    cd ${PROJECT_NAME}
                    . venv/bin/activate
                    echo "Running tests..."
                    ${PYTEST} --junitxml=test-results.xml --cov=. --cov-report=html
                """

            }

            post {
                always {
                    junit 'test-results.xml'
                    publishHTML target: [
                        allowMissing: false,
                        alwaysLinkToLastBuild: false,
                        keepAll: true,
                        reportDir: 'htmlcov',
                        reportFiles: 'index.html',
                        reportName: 'Coverage Report'
                    ]
                }
            }
        }
    }

    post {
        always {
            cleanWs()
        }
        success {
            echo 'Pipeline completed successfully!'
        }
        failure {
            echo 'Pipeline failed!'
        }
    }
}

// This Jenkinsfile is designed to automate the CI/CD process for a Python project using Docker.
// It includes stages for checking out the code, setting up a Python virtual environment, installing dependencies
